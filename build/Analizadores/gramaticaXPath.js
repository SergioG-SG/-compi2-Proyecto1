/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramaticaXPath = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,12],$V2=[1,53],$V3=[1,15],$V4=[1,35],$V5=[1,41],$V6=[1,42],$V7=[1,43],$V8=[1,44],$V9=[1,45],$Va=[1,46],$Vb=[1,47],$Vc=[1,48],$Vd=[1,49],$Ve=[1,27],$Vf=[1,36],$Vg=[1,37],$Vh=[1,38],$Vi=[1,39],$Vj=[1,40],$Vk=[1,51],$Vl=[1,52],$Vm=[1,54],$Vn=[1,24],$Vo=[1,30],$Vp=[1,31],$Vq=[1,32],$Vr=[1,33],$Vs=[1,34],$Vt=[5,40],$Vu=[5,8,40],$Vv=[1,57],$Vw=[5,8,10,40],$Vx=[5,8,10,14,15,16,17,18,19,21,23,40],$Vy=[1,67],$Vz=[1,68],$VA=[1,69],$VB=[5,8,10,14,15,16,17,18,19,21,23,25,26,27,40],$VC=[1,70],$VD=[5,8,10,14,15,16,17,18,19,21,23,25,26,27,28,40],$VE=[1,75],$VF=[5,8,10,14,15,16,17,18,19,21,23,25,26,27,28,31,40],$VG=[5,8,10,14,15,16,17,18,19,21,23,25,26,27,28,31,39,40],$VH=[1,78],$VI=[21,23,25,31,39,44,46,47,48,49,50,51,52,53,55,56,57,58,59,60,61,62,63,66,68,69,70,71,72],$VJ=[1,111],$VK=[25,61,62,63];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"XPATH":3,"EXPR":4,"EOF":5,"EXPRSINGLE":6,"OREXPR":7,"or":8,"ANDEXPR":9,"and":10,"COMPARISONXPR":11,"STRINGCONCATXPR":12,"GENERALCOMP":13,"=":14,"!=":15,"<":16,">":17,"<=":18,">=":19,"ADDITIVEEXPR":20,"+":21,"MULTIPLICATIVEEXPR":22,"-":23,"UNIONEXPR":24,"*":25,"div":26,"mod":27,"|":28,"UNARYEXPR":29,"PATHEXPR":30,"/":31,"RELATIVEPATHEXPR":32,"STEPEXPR":33,"POSTFIXEXPR":34,"AXISTEP":35,"REVERSESTEP":36,"PREDICATELIST":37,"FORDWARDSTEP":38,"[":39,"]":40,"FORDWARDAXIS":41,"NODETEST":42,"ABBREVFORDWARDSTEP":43,"child":44,"::":45,"descendant-or-self":46,"descendant":47,"attribute":48,"self":49,"following-sibling":50,"following":51,"namespace":52,"@":53,"REVERSEAXIS":54,"..":55,"parent":56,"ancestor":57,"preceding-sibling":58,"preceding":59,"ancestor-or-self":60,"text()":61,"node()":62,"nodename":63,"PRIMARYEXPR":64,"LITERAL":65,".":66,"ARRAYCONSTRUCTOR":67,"digito":68,"todo1":69,"todo2":70,"last()":71,"position()":72,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"or",10:"and",14:"=",15:"!=",16:"<",17:">",18:"<=",19:">=",21:"+",23:"-",25:"*",26:"div",27:"mod",28:"|",31:"/",39:"[",40:"]",44:"child",45:"::",46:"descendant-or-self",47:"descendant",48:"attribute",49:"self",50:"following-sibling",51:"following",52:"namespace",53:"@",55:"..",56:"parent",57:"ancestor",58:"preceding-sibling",59:"preceding",60:"ancestor-or-self",61:"text()",62:"node()",63:"nodename",66:".",68:"digito",69:"todo1",70:"todo2",71:"last()",72:"position()"},
productions_: [0,[3,2],[4,1],[6,1],[7,3],[7,1],[9,3],[9,1],[11,3],[11,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[12,1],[20,3],[20,3],[20,1],[22,1],[22,3],[22,3],[22,3],[24,3],[24,1],[29,2],[29,2],[29,1],[30,3],[30,2],[30,1],[32,1],[32,3],[32,4],[33,1],[33,1],[35,2],[35,2],[35,1],[35,1],[37,4],[37,3],[38,2],[38,1],[41,2],[41,2],[41,2],[41,2],[41,2],[41,2],[41,2],[41,2],[43,2],[43,1],[36,2],[36,1],[54,2],[54,2],[54,2],[54,2],[54,2],[42,1],[42,1],[42,1],[42,1],[34,1],[34,4],[64,1],[64,1],[64,1],[67,2],[67,3],[65,1],[65,1],[65,1],[65,1],[65,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$=$$[$0-1];return this.$;
break;
case 2: case 3: case 9: case 28: case 30: case 36: case 40: case 44: case 54:
this.$=$$[$0];
break;
case 4: case 6: case 17: case 18: case 21: case 22: case 23: case 24: case 33:
 $$[$0-2].push($$[$0]); this.$=$$[$0-2]; 
break;
case 5: case 7: case 19: case 20: case 25: case 32:
this.$=[$$[$0]];
break;
case 16:
 this.$ = $$[$0] ;
break;
case 34:
 $$[$0-3].push($$[$0]); this.$=$$[$0-3]; 
break;
case 41: case 42:
console.log("dio");
break;
case 53:
$$[$0-1].tipo=Tipo2.ATRIBUTO; this.$ = $$[$0-1];
break;
case 62: case 63:
this.$ = new Acceso($$[$0],Tipo2.TEST,_$[$0].first_line,_$[$0].first_column);
break;
case 64:
this.$ = new Acceso($$[$0],Tipo2.SIGNO,_$[$0].first_line,_$[$0].first_column);
break;
case 65:
this.$ = new Acceso($$[$0],Tipo2.ACCESO,_$[$0].first_line,_$[$0].first_column);
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,11:6,12:7,20:8,21:$V0,22:9,23:$V1,24:10,25:$V2,29:11,30:14,31:$V3,32:16,33:17,34:18,35:19,36:21,38:22,39:$V4,41:28,42:50,43:29,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:26,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:20,65:23,66:$Vn,67:25,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{1:[3]},{5:[1,55]},o($Vt,[2,2]),o($Vt,[2,3],{8:[1,56]}),o($Vu,[2,5],{10:$Vv}),o($Vw,[2,7]),o($Vw,[2,9],{13:58,14:[1,59],15:[1,60],16:[1,61],17:[1,62],18:[1,63],19:[1,64]}),o([5,8,10,14,15,16,17,18,19,40],[2,16],{21:[1,65],23:[1,66]}),o($Vx,[2,19],{25:$Vy,26:$Vz,27:$VA}),o($VB,[2,20],{28:$VC}),o($VD,[2,25]),{25:$V2,30:71,31:$V3,32:16,33:17,34:18,35:19,36:21,38:22,39:$V4,41:28,42:50,43:29,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:26,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:20,65:23,66:$Vn,67:25,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{25:$V2,30:72,31:$V3,32:16,33:17,34:18,35:19,36:21,38:22,39:$V4,41:28,42:50,43:29,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:26,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:20,65:23,66:$Vn,67:25,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},o($VD,[2,28]),{25:$V2,31:[1,73],32:74,33:17,34:18,35:19,36:21,38:22,39:$V4,41:28,42:50,43:29,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:26,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:20,65:23,66:$Vn,67:25,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},o($VD,[2,31],{31:$VE}),o($VF,[2,32]),o($VF,[2,35],{39:[1,76]}),o($VF,[2,36]),o($VG,[2,66]),o($VF,[2,39],{37:77,39:$VH}),o($VF,[2,40],{37:79,39:$VH}),o($VG,[2,68]),o($VG,[2,69]),o($VG,[2,70]),{25:$V2,42:80,61:$Vk,62:$Vl,63:$Vm},o($VG,[2,56]),{25:$V2,42:81,61:$Vk,62:$Vl,63:$Vm},o($VG,[2,44]),o($VG,[2,73]),o($VG,[2,74]),o($VG,[2,75]),o($VG,[2,76]),o($VG,[2,77]),{6:83,7:4,9:5,11:6,12:7,20:8,21:$V0,22:9,23:$V1,24:10,25:$V2,29:11,30:14,31:$V3,32:16,33:17,34:18,35:19,36:21,38:22,39:$V4,40:[1,82],41:28,42:50,43:29,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:26,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:20,65:23,66:$Vn,67:25,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{45:[1,84]},{45:[1,85]},{45:[1,86]},{45:[1,87]},{45:[1,88]},{45:[1,89]},{45:[1,90]},{45:[1,91]},{45:[1,92]},{45:[1,93]},{45:[1,94]},{45:[1,95]},{45:[1,96]},{25:$V2,42:97,61:$Vk,62:$Vl,63:$Vm},o($VG,[2,54]),o($VG,[2,62]),o($VG,[2,63]),o($VG,[2,64]),o($VG,[2,65]),{1:[2,1]},{9:98,11:6,12:7,20:8,21:$V0,22:9,23:$V1,24:10,25:$V2,29:11,30:14,31:$V3,32:16,33:17,34:18,35:19,36:21,38:22,39:$V4,41:28,42:50,43:29,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:26,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:20,65:23,66:$Vn,67:25,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{11:99,12:7,20:8,21:$V0,22:9,23:$V1,24:10,25:$V2,29:11,30:14,31:$V3,32:16,33:17,34:18,35:19,36:21,38:22,39:$V4,41:28,42:50,43:29,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:26,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:20,65:23,66:$Vn,67:25,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{12:100,20:8,21:$V0,22:9,23:$V1,24:10,25:$V2,29:11,30:14,31:$V3,32:16,33:17,34:18,35:19,36:21,38:22,39:$V4,41:28,42:50,43:29,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:26,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:20,65:23,66:$Vn,67:25,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},o($VI,[2,10]),o($VI,[2,11]),o($VI,[2,12]),o($VI,[2,13]),o($VI,[2,14]),o($VI,[2,15]),{21:$V0,22:101,23:$V1,24:10,25:$V2,29:11,30:14,31:$V3,32:16,33:17,34:18,35:19,36:21,38:22,39:$V4,41:28,42:50,43:29,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:26,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:20,65:23,66:$Vn,67:25,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{21:$V0,22:102,23:$V1,24:10,25:$V2,29:11,30:14,31:$V3,32:16,33:17,34:18,35:19,36:21,38:22,39:$V4,41:28,42:50,43:29,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:26,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:20,65:23,66:$Vn,67:25,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{21:$V0,23:$V1,24:103,25:$V2,29:11,30:14,31:$V3,32:16,33:17,34:18,35:19,36:21,38:22,39:$V4,41:28,42:50,43:29,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:26,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:20,65:23,66:$Vn,67:25,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{21:$V0,23:$V1,24:104,25:$V2,29:11,30:14,31:$V3,32:16,33:17,34:18,35:19,36:21,38:22,39:$V4,41:28,42:50,43:29,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:26,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:20,65:23,66:$Vn,67:25,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{21:$V0,23:$V1,24:105,25:$V2,29:11,30:14,31:$V3,32:16,33:17,34:18,35:19,36:21,38:22,39:$V4,41:28,42:50,43:29,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:26,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:20,65:23,66:$Vn,67:25,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{21:$V0,23:$V1,25:$V2,29:106,30:14,31:$V3,32:16,33:17,34:18,35:19,36:21,38:22,39:$V4,41:28,42:50,43:29,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:26,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:20,65:23,66:$Vn,67:25,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},o($VD,[2,26]),o($VD,[2,27]),{25:$V2,32:107,33:17,34:18,35:19,36:21,38:22,39:$V4,41:28,42:50,43:29,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:26,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:20,65:23,66:$Vn,67:25,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},o($VD,[2,30],{31:$VE}),{25:$V2,31:[1,109],33:108,34:18,35:19,36:21,38:22,39:$V4,41:28,42:50,43:29,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:26,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:20,65:23,66:$Vn,67:25,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{4:110,6:3,7:4,9:5,11:6,12:7,20:8,21:$V0,22:9,23:$V1,24:10,25:$V2,29:11,30:14,31:$V3,32:16,33:17,34:18,35:19,36:21,38:22,39:$V4,41:28,42:50,43:29,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:26,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:20,65:23,66:$Vn,67:25,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},o($VF,[2,37],{39:$VJ}),{4:112,6:3,7:4,9:5,11:6,12:7,20:8,21:$V0,22:9,23:$V1,24:10,25:$V2,29:11,30:14,31:$V3,32:16,33:17,34:18,35:19,36:21,38:22,39:$V4,41:28,42:50,43:29,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:26,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:20,65:23,66:$Vn,67:25,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},o($VF,[2,38],{39:$VJ}),o($VG,[2,55]),o($VG,[2,43]),o($VG,[2,71]),{40:[1,113]},o($VK,[2,57]),o($VK,[2,58]),o($VK,[2,59]),o($VK,[2,60]),o($VK,[2,61]),o($VK,[2,45]),o($VK,[2,46]),o($VK,[2,47]),o($VK,[2,48]),o($VK,[2,49]),o($VK,[2,50]),o($VK,[2,51]),o($VK,[2,52]),o($VG,[2,53]),o($Vu,[2,4],{10:$Vv}),o($Vw,[2,6]),o($Vw,[2,8]),o($Vx,[2,17],{25:$Vy,26:$Vz,27:$VA}),o($Vx,[2,18],{25:$Vy,26:$Vz,27:$VA}),o($VB,[2,21],{28:$VC}),o($VB,[2,22],{28:$VC}),o($VB,[2,23],{28:$VC}),o($VD,[2,24]),o($VD,[2,29],{31:$VE}),o($VF,[2,33]),{25:$V2,33:114,34:18,35:19,36:21,38:22,39:$V4,41:28,42:50,43:29,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:26,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:20,65:23,66:$Vn,67:25,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{40:[1,115]},{4:116,6:3,7:4,9:5,11:6,12:7,20:8,21:$V0,22:9,23:$V1,24:10,25:$V2,29:11,30:14,31:$V3,32:16,33:17,34:18,35:19,36:21,38:22,39:$V4,41:28,42:50,43:29,44:$V5,46:$V6,47:$V7,48:$V8,49:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:26,55:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:$Vl,63:$Vm,64:20,65:23,66:$Vn,67:25,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs},{40:[1,117]},o($VG,[2,72]),o($VF,[2,34]),o($VG,[2,67]),{40:[1,118]},o($VG,[2,42]),o($VG,[2,41])],
defaultActions: {55:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	const { Acceso, Tipo2 } = require('../Interprete/Expresion/Acceso');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 69;
break;
case 1:return 70;
break;
case 2:return 66;
break;
case 3:return 55;
break;
case 4:return 45;
break;
case 5:return 31;
break;
case 6:return 39;
break;
case 7:return 40;
break;
case 8:return 53;
break;
case 9:return 28;
break;
case 10:return 21;
break;
case 11:return 23;
break;
case 12:return 26;
break;
case 13:return 25;
break;
case 14:return 19;
break;
case 15:return 18;
break;
case 16:return 15;
break;
case 17:return 14;
break;
case 18:return 17;
break;
case 19:return 16;
break;
case 20:return 8;
break;
case 21:return 10;
break;
case 22:return 27;
break;
case 23:return 62;
break;
case 24:return 61;
break;
case 25:return 71;
break;
case 26:return 72;
break;
case 27:return 56;
break;
case 28:return 60;
break;
case 29:return 57;
break;
case 30:return 48;
break;
case 31:return 44;
break;
case 32:return 46;
break;
case 33:return 47;
break;
case 34:return 50;
break;
case 35:return 51;
break;
case 36:return 52;
break;
case 37:return 58;
break;
case 38:return 59;
break;
case 39:return 49;
break;
case 40:return 68;
break;
case 41:return 63;
break;
case 42:
break;
case 43:
break;
case 44:return 5;
break;
case 45: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:\.)/i,/^(?:\.\.)/i,/^(?:::)/i,/^(?:\/)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:@)/i,/^(?:\|)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:div\b)/i,/^(?:\*)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:mod\b)/i,/^(?:node\(\))/i,/^(?:text\(\))/i,/^(?:last\(\))/i,/^(?:position\(\))/i,/^(?:parent\b)/i,/^(?:ancestor-or-self\b)/i,/^(?:ancestor\b)/i,/^(?:attribute\b)/i,/^(?:child\b)/i,/^(?:descendant-or-self\b)/i,/^(?:descendant\b)/i,/^(?:following-sibling\b)/i,/^(?:following\b)/i,/^(?:namespace\b)/i,/^(?:preceding-sibling\b)/i,/^(?:preceding\b)/i,/^(?:self\b)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*\b)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramaticaXPath;
exports.Parser = gramaticaXPath.Parser;
exports.parse = function () { return gramaticaXPath.parse.apply(gramaticaXPath, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}