/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramaticaXPath = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,14],$V2=[1,57],$V3=[1,19],$V4=[1,39],$V5=[1,46],$V6=[1,47],$V7=[1,48],$V8=[1,49],$V9=[1,50],$Va=[1,51],$Vb=[1,52],$Vc=[1,53],$Vd=[1,54],$Ve=[1,40],$Vf=[1,41],$Vg=[1,42],$Vh=[1,43],$Vi=[1,44],$Vj=[1,45],$Vk=[1,58],$Vl=[1,59],$Vm=[1,60],$Vn=[1,28],$Vo=[1,34],$Vp=[1,35],$Vq=[1,36],$Vr=[1,37],$Vs=[1,38],$Vt=[5,44],$Vu=[5,8,44],$Vv=[1,63],$Vw=[5,8,10,44],$Vx=[5,8,10,14,15,16,17,18,19,44],$Vy=[5,8,10,14,15,16,17,18,19,22,24,44],$Vz=[1,73],$VA=[1,74],$VB=[1,75],$VC=[5,8,10,14,15,16,17,18,19,22,24,26,27,28,44],$VD=[1,76],$VE=[5,8,10,14,15,16,17,18,19,22,24,26,27,28,29,44],$VF=[1,81],$VG=[5,8,10,14,15,16,17,18,19,22,24,26,27,28,29,35,44],$VH=[5,8,10,14,15,16,17,18,19,22,24,26,27,28,29,35,43,44],$VI=[1,84],$VJ=[22,24,26,35,43,48,50,51,52,53,54,55,56,57,60,61,62,63,64,65,67,68,69,72,74,75,76,77,78],$VK=[1,117],$VL=[26,67,68,69];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"XPATH":3,"EXPR":4,"EOF":5,"EXPRSINGLE":6,"OREXPR":7,"or":8,"ANDEXPR":9,"and":10,"COMPARISONXPR":11,"STRINGCONCATXPR":12,"GENERALCOMP":13,"=":14,"!=":15,"<":16,">":17,"<=":18,">=":19,"RANGEXPR":20,"ADDITIVEEXPR":21,"+":22,"MULTIPLICATIVEEXPR":23,"-":24,"UNIONEXPR":25,"*":26,"div":27,"mod":28,"|":29,"ARROWEXPR":30,"UNARYEXPR":31,"VAlUEEXPR":32,"SIMPLEMAPEXPR":33,"PATHEXPR":34,"/":35,"RELATIVEPATHEXPR":36,"STEPEXPR":37,"POSTFIXEXPR":38,"AXISTEP":39,"REVERSESTEP":40,"PREDICATELIST":41,"FORDWARDSTEP":42,"[":43,"]":44,"FORDWARDAXIS":45,"NODETEST":46,"ABBREVFORDWARDSTEP":47,"child":48,"::":49,"descendant-or-self":50,"descendant":51,"attribute":52,"self":53,"following-sibling":54,"following":55,"namespace":56,"@":57,"REVERSEAXIS":58,"ABBREVREVERSESTEP":59,"parent":60,"ancestor":61,"preceding-sibling":62,"preceding":63,"ancestor-or-self":64,"..":65,"KINDTEST":66,"nodename":67,"text()":68,"node()":69,"PRIMARYEXPR":70,"LITERAL":71,".":72,"ARRAYCONSTRUCTOR":73,"digito":74,"todo1":75,"todo2":76,"last()":77,"position()":78,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"or",10:"and",14:"=",15:"!=",16:"<",17:">",18:"<=",19:">=",22:"+",24:"-",26:"*",27:"div",28:"mod",29:"|",35:"/",43:"[",44:"]",48:"child",49:"::",50:"descendant-or-self",51:"descendant",52:"attribute",53:"self",54:"following-sibling",55:"following",56:"namespace",57:"@",60:"parent",61:"ancestor",62:"preceding-sibling",63:"preceding",64:"ancestor-or-self",65:"..",67:"nodename",68:"text()",69:"node()",72:".",74:"digito",75:"todo1",76:"todo2",77:"last()",78:"position()"},
productions_: [0,[3,2],[4,1],[6,1],[7,3],[7,1],[9,3],[9,1],[11,3],[11,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[12,1],[20,1],[21,3],[21,3],[21,1],[23,1],[23,3],[23,3],[23,3],[25,3],[25,1],[30,1],[31,2],[31,2],[31,1],[32,1],[33,1],[34,3],[34,2],[34,1],[36,1],[36,3],[36,4],[37,1],[37,1],[39,2],[39,2],[39,1],[39,1],[41,4],[41,3],[42,2],[42,1],[45,2],[45,2],[45,2],[45,2],[45,2],[45,2],[45,2],[45,2],[47,2],[47,1],[40,2],[40,1],[58,2],[58,2],[58,2],[58,2],[58,2],[59,1],[46,1],[46,1],[46,1],[66,1],[66,1],[38,1],[38,4],[70,1],[70,1],[70,1],[73,2],[73,3],[71,1],[71,1],[71,1],[71,1],[71,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$=$$[$0-1];return this.$;
break;
case 2: case 3: case 9: case 27: case 30: case 31: case 32: case 40: case 44: case 48: case 58:
this.$=$$[$0];
break;
case 4: case 6: case 18: case 19: case 22: case 23: case 24: case 25: case 37:
 $$[$0-2].push($$[$0]); this.$=$$[$0-2]; 
break;
case 5: case 7: case 20: case 21: case 26: case 36:
this.$=[$$[$0]];
break;
case 16:
 this.$ = $$[$0] ;
break;
case 17:
 this.$=$$[$0]; 
break;
case 34:
this.$=$$[$0-1];
break;
case 38:
 $$[$0-3].push($$[$0]); this.$=$$[$0-3]; 
break;
case 45: case 46:
console.log("dio");
break;
case 69:
console.log($$[$0]);this.$=$$[$0];
break;
case 73:
console.log("dio2");
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,11:6,12:7,20:8,21:9,22:$V0,23:10,24:$V1,25:11,26:$V2,30:12,31:13,32:16,33:17,34:18,35:$V3,36:20,37:21,38:22,39:23,40:25,42:26,43:$V4,45:32,46:55,47:33,48:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,58:30,59:31,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:56,67:$Vk,68:$Vl,69:$Vm,70:24,71:27,72:$Vn,73:29,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{1:[3]},{5:[1,61]},o($Vt,[2,2]),o($Vt,[2,3],{8:[1,62]}),o($Vu,[2,5],{10:$Vv}),o($Vw,[2,7]),o($Vw,[2,9],{13:64,14:[1,65],15:[1,66],16:[1,67],17:[1,68],18:[1,69],19:[1,70]}),o($Vx,[2,16]),o($Vx,[2,17],{22:[1,71],24:[1,72]}),o($Vy,[2,20],{26:$Vz,27:$VA,28:$VB}),o($VC,[2,21],{29:$VD}),o($VE,[2,26]),o($VE,[2,27]),{26:$V2,32:77,33:17,34:18,35:$V3,36:20,37:21,38:22,39:23,40:25,42:26,43:$V4,45:32,46:55,47:33,48:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,58:30,59:31,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:56,67:$Vk,68:$Vl,69:$Vm,70:24,71:27,72:$Vn,73:29,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{26:$V2,32:78,33:17,34:18,35:$V3,36:20,37:21,38:22,39:23,40:25,42:26,43:$V4,45:32,46:55,47:33,48:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,58:30,59:31,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:56,67:$Vk,68:$Vl,69:$Vm,70:24,71:27,72:$Vn,73:29,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},o($VE,[2,30]),o($VE,[2,31]),o($VE,[2,32]),{26:$V2,35:[1,79],36:80,37:21,38:22,39:23,40:25,42:26,43:$V4,45:32,46:55,47:33,48:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,58:30,59:31,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:56,67:$Vk,68:$Vl,69:$Vm,70:24,71:27,72:$Vn,73:29,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},o($VE,[2,35],{35:$VF}),o($VG,[2,36]),o($VG,[2,39],{43:[1,82]}),o($VG,[2,40]),o($VH,[2,72]),o($VG,[2,43],{41:83,43:$VI}),o($VG,[2,44],{41:85,43:$VI}),o($VH,[2,74]),o($VH,[2,75]),o($VH,[2,76]),{26:$V2,46:86,66:56,67:$Vk,68:$Vl,69:$Vm},o($VH,[2,60]),{26:$V2,46:87,66:56,67:$Vk,68:$Vl,69:$Vm},o($VH,[2,48]),o($VH,[2,79]),o($VH,[2,80]),o($VH,[2,81]),o($VH,[2,82]),o($VH,[2,83]),{6:89,7:4,9:5,11:6,12:7,20:8,21:9,22:$V0,23:10,24:$V1,25:11,26:$V2,30:12,31:13,32:16,33:17,34:18,35:$V3,36:20,37:21,38:22,39:23,40:25,42:26,43:$V4,44:[1,88],45:32,46:55,47:33,48:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,58:30,59:31,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:56,67:$Vk,68:$Vl,69:$Vm,70:24,71:27,72:$Vn,73:29,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{49:[1,90]},{49:[1,91]},{49:[1,92]},{49:[1,93]},{49:[1,94]},o($VH,[2,66]),{49:[1,95]},{49:[1,96]},{49:[1,97]},{49:[1,98]},{49:[1,99]},{49:[1,100]},{49:[1,101]},{49:[1,102]},{26:$V2,46:103,66:56,67:$Vk,68:$Vl,69:$Vm},o($VH,[2,58]),o($VH,[2,67]),o($VH,[2,68]),o($VH,[2,69]),o($VH,[2,70]),o($VH,[2,71]),{1:[2,1]},{9:104,11:6,12:7,20:8,21:9,22:$V0,23:10,24:$V1,25:11,26:$V2,30:12,31:13,32:16,33:17,34:18,35:$V3,36:20,37:21,38:22,39:23,40:25,42:26,43:$V4,45:32,46:55,47:33,48:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,58:30,59:31,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:56,67:$Vk,68:$Vl,69:$Vm,70:24,71:27,72:$Vn,73:29,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{11:105,12:7,20:8,21:9,22:$V0,23:10,24:$V1,25:11,26:$V2,30:12,31:13,32:16,33:17,34:18,35:$V3,36:20,37:21,38:22,39:23,40:25,42:26,43:$V4,45:32,46:55,47:33,48:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,58:30,59:31,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:56,67:$Vk,68:$Vl,69:$Vm,70:24,71:27,72:$Vn,73:29,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{12:106,20:8,21:9,22:$V0,23:10,24:$V1,25:11,26:$V2,30:12,31:13,32:16,33:17,34:18,35:$V3,36:20,37:21,38:22,39:23,40:25,42:26,43:$V4,45:32,46:55,47:33,48:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,58:30,59:31,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:56,67:$Vk,68:$Vl,69:$Vm,70:24,71:27,72:$Vn,73:29,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},o($VJ,[2,10]),o($VJ,[2,11]),o($VJ,[2,12]),o($VJ,[2,13]),o($VJ,[2,14]),o($VJ,[2,15]),{22:$V0,23:107,24:$V1,25:11,26:$V2,30:12,31:13,32:16,33:17,34:18,35:$V3,36:20,37:21,38:22,39:23,40:25,42:26,43:$V4,45:32,46:55,47:33,48:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,58:30,59:31,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:56,67:$Vk,68:$Vl,69:$Vm,70:24,71:27,72:$Vn,73:29,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{22:$V0,23:108,24:$V1,25:11,26:$V2,30:12,31:13,32:16,33:17,34:18,35:$V3,36:20,37:21,38:22,39:23,40:25,42:26,43:$V4,45:32,46:55,47:33,48:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,58:30,59:31,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:56,67:$Vk,68:$Vl,69:$Vm,70:24,71:27,72:$Vn,73:29,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{22:$V0,24:$V1,25:109,26:$V2,30:12,31:13,32:16,33:17,34:18,35:$V3,36:20,37:21,38:22,39:23,40:25,42:26,43:$V4,45:32,46:55,47:33,48:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,58:30,59:31,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:56,67:$Vk,68:$Vl,69:$Vm,70:24,71:27,72:$Vn,73:29,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{22:$V0,24:$V1,25:110,26:$V2,30:12,31:13,32:16,33:17,34:18,35:$V3,36:20,37:21,38:22,39:23,40:25,42:26,43:$V4,45:32,46:55,47:33,48:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,58:30,59:31,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:56,67:$Vk,68:$Vl,69:$Vm,70:24,71:27,72:$Vn,73:29,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{22:$V0,24:$V1,25:111,26:$V2,30:12,31:13,32:16,33:17,34:18,35:$V3,36:20,37:21,38:22,39:23,40:25,42:26,43:$V4,45:32,46:55,47:33,48:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,58:30,59:31,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:56,67:$Vk,68:$Vl,69:$Vm,70:24,71:27,72:$Vn,73:29,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{22:$V0,24:$V1,26:$V2,30:112,31:13,32:16,33:17,34:18,35:$V3,36:20,37:21,38:22,39:23,40:25,42:26,43:$V4,45:32,46:55,47:33,48:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,58:30,59:31,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:56,67:$Vk,68:$Vl,69:$Vm,70:24,71:27,72:$Vn,73:29,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},o($VE,[2,28]),o($VE,[2,29]),{26:$V2,36:113,37:21,38:22,39:23,40:25,42:26,43:$V4,45:32,46:55,47:33,48:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,58:30,59:31,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:56,67:$Vk,68:$Vl,69:$Vm,70:24,71:27,72:$Vn,73:29,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},o($VE,[2,34],{35:$VF}),{26:$V2,35:[1,115],37:114,38:22,39:23,40:25,42:26,43:$V4,45:32,46:55,47:33,48:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,58:30,59:31,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:56,67:$Vk,68:$Vl,69:$Vm,70:24,71:27,72:$Vn,73:29,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{4:116,6:3,7:4,9:5,11:6,12:7,20:8,21:9,22:$V0,23:10,24:$V1,25:11,26:$V2,30:12,31:13,32:16,33:17,34:18,35:$V3,36:20,37:21,38:22,39:23,40:25,42:26,43:$V4,45:32,46:55,47:33,48:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,58:30,59:31,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:56,67:$Vk,68:$Vl,69:$Vm,70:24,71:27,72:$Vn,73:29,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},o($VG,[2,41],{43:$VK}),{4:118,6:3,7:4,9:5,11:6,12:7,20:8,21:9,22:$V0,23:10,24:$V1,25:11,26:$V2,30:12,31:13,32:16,33:17,34:18,35:$V3,36:20,37:21,38:22,39:23,40:25,42:26,43:$V4,45:32,46:55,47:33,48:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,58:30,59:31,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:56,67:$Vk,68:$Vl,69:$Vm,70:24,71:27,72:$Vn,73:29,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},o($VG,[2,42],{43:$VK}),o($VH,[2,59]),o($VH,[2,47]),o($VH,[2,77]),{44:[1,119]},o($VL,[2,61]),o($VL,[2,62]),o($VL,[2,63]),o($VL,[2,64]),o($VL,[2,65]),o($VL,[2,49]),o($VL,[2,50]),o($VL,[2,51]),o($VL,[2,52]),o($VL,[2,53]),o($VL,[2,54]),o($VL,[2,55]),o($VL,[2,56]),o($VH,[2,57]),o($Vu,[2,4],{10:$Vv}),o($Vw,[2,6]),o($Vw,[2,8]),o($Vy,[2,18],{26:$Vz,27:$VA,28:$VB}),o($Vy,[2,19],{26:$Vz,27:$VA,28:$VB}),o($VC,[2,22],{29:$VD}),o($VC,[2,23],{29:$VD}),o($VC,[2,24],{29:$VD}),o($VE,[2,25]),o($VE,[2,33],{35:$VF}),o($VG,[2,37]),{26:$V2,37:120,38:22,39:23,40:25,42:26,43:$V4,45:32,46:55,47:33,48:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,58:30,59:31,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:56,67:$Vk,68:$Vl,69:$Vm,70:24,71:27,72:$Vn,73:29,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{44:[1,121]},{4:122,6:3,7:4,9:5,11:6,12:7,20:8,21:9,22:$V0,23:10,24:$V1,25:11,26:$V2,30:12,31:13,32:16,33:17,34:18,35:$V3,36:20,37:21,38:22,39:23,40:25,42:26,43:$V4,45:32,46:55,47:33,48:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,58:30,59:31,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:$Vi,65:$Vj,66:56,67:$Vk,68:$Vl,69:$Vm,70:24,71:27,72:$Vn,73:29,74:$Vo,75:$Vp,76:$Vq,77:$Vr,78:$Vs},{44:[1,123]},o($VH,[2,78]),o($VG,[2,38]),o($VH,[2,73]),{44:[1,124]},o($VH,[2,46]),o($VH,[2,45])],
defaultActions: {61:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 75;
break;
case 1:return 76;
break;
case 2:return 72;
break;
case 3:return 65;
break;
case 4:return 49;
break;
case 5:return 35;
break;
case 6:return 43;
break;
case 7:return 44;
break;
case 8:return 57;
break;
case 9:return 29;
break;
case 10:return 22;
break;
case 11:return 24;
break;
case 12:return 27;
break;
case 13:return 26;
break;
case 14:return 19;
break;
case 15:return 18;
break;
case 16:return 15;
break;
case 17:return 14;
break;
case 18:return 17;
break;
case 19:return 16;
break;
case 20:return 8;
break;
case 21:return 10;
break;
case 22:return 28;
break;
case 23:return 69;
break;
case 24:return 68;
break;
case 25:return 77;
break;
case 26:return 78;
break;
case 27:return 60;
break;
case 28:return 64;
break;
case 29:return 61;
break;
case 30:return 52;
break;
case 31:return 48;
break;
case 32:return 50;
break;
case 33:return 51;
break;
case 34:return 54;
break;
case 35:return 55;
break;
case 36:return 56;
break;
case 37:return 62;
break;
case 38:return 63;
break;
case 39:return 53;
break;
case 40:return 74;
break;
case 41:return 67;
break;
case 42:
break;
case 43:
break;
case 44:return 5;
break;
case 45: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:\.)/i,/^(?:\.\.)/i,/^(?:::)/i,/^(?:\/)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:@)/i,/^(?:\|)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:div\b)/i,/^(?:\*)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:mod\b)/i,/^(?:node\(\))/i,/^(?:text\(\))/i,/^(?:last\(\))/i,/^(?:position\(\))/i,/^(?:parent\b)/i,/^(?:ancestor-or-self\b)/i,/^(?:ancestor\b)/i,/^(?:attribute\b)/i,/^(?:child\b)/i,/^(?:descendant-or-self\b)/i,/^(?:descendant\b)/i,/^(?:following-sibling\b)/i,/^(?:following\b)/i,/^(?:namespace\b)/i,/^(?:preceding-sibling\b)/i,/^(?:preceding\b)/i,/^(?:self\b)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*\b)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramaticaXPath;
exports.Parser = gramaticaXPath.Parser;
exports.parse = function () { return gramaticaXPath.parse.apply(gramaticaXPath, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}